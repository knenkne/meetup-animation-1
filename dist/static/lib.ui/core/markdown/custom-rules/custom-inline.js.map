{"version":3,"file":"custom-inline.js","sources":["../../../src/markdown/custom-rules/custom-inline.js"],"sourcesContent":["const COLON = ':'\nconst LESS_THAN_SIGN = '<'\nconst GREATER_THAN_SIGN = '>'\n\n/**\n * make <*templateName*:content> rule\n * @param {String} templateName\n */\n\nexport const inlineFunction = (templateName) => (state) => {\n    const {\n        posMax: max,\n        src: text\n    } = state\n    let position = state.pos\n\n    if (text[position] !== LESS_THAN_SIGN /* < */) {\n        // https://github.com/jonschlinkert/remarkable/blob/master/docs/parsing_inline.md\n        // >If for any reason, the syntax you are trying to parse is incorrectly formated and\n        // >you are unable to parse it, you must abort and return false without\n        // >modifying state in any way.\n        return false\n    }\n\n    position = position + templateName.length + 1\n\n    if (text[position] !== COLON /* : */) {\n        return false\n    }\n\n    position += 1\n\n    const positionAfterContent = text.slice(position, max).indexOf(GREATER_THAN_SIGN)\n    if (positionAfterContent === -1) {\n        return false\n    }\n\n    const content = text.slice(position, position + positionAfterContent)\n    position += positionAfterContent + 1\n    // https://github.com/jonschlinkert/remarkable/blob/master/docs/parsing_inline.md\n    // Remarkable нужно передать pos и posMax - начало и конец шаблона.\n    // pos - начало шаблона с первой позиции ( \"c\" )\n    // posMax - конец шаблона ( \">\" )\n    // eslint-disable-next-line no-param-reassign\n    state.pos += 1\n    // eslint-disable-next-line no-param-reassign\n    state.posMax = position\n\n    // https://github.com/jonschlinkert/remarkable/blob/master/docs/parser.md\n    // >To completely parse a block, you will need to push new tokens by calling state.push(token).\n    // Сообщаем Remarkable какое правило для view использовать\n    state.push({\n        type: `${templateName}`,\n        level: 1,\n        content,\n        display: 'inline',\n    })\n    // https://github.com/jonschlinkert/remarkable/blob/master/docs/parsing_inline.md\n    // передаем Remarkable новые pos и posMax для поиска следующего шаблона\n    // pos - конец шаблона ( \">\" )\n    // posMax - оставшаяся часть строки (константа max)\n    // eslint-disable-next-line no-param-reassign\n    state.pos = state.posMax\n    // https://github.com/jonschlinkert/remarkable/blob/master/docs/parsing_inline.md\n    // eslint-disable-next-line no-param-reassign\n    state.posMax = max\n\n    return true\n}\n\n/**\n * @param {Object} md - markdown instance\n * @param {Object} options\n * @param {Function} options.render\n * @param {String} options.templateNam\n *\n * Подключение к инстансу Remarkable\n * равному md:\n * md.use(customInline, {\n *   templateName: 'currency',\n *   render: (content) => <span>${content}</span>\n * })\n *\n * Пример использования:\n * <currency:RUB> => <span>RUB</span>\n */\n\nexport const customInline = (md, { templateName, render }) => {\n    md.inline.ruler.push(\n        templateName,\n        inlineFunction(templateName),\n        { rule: 2 }\n    )\n    // eslint-disable-next-line no-param-reassign\n    md.renderer.rules[templateName] = (tokens, idx) =>\n        render(tokens[idx].content, tokens[idx].options)\n}\n"],"names":["COLON","LESS_THAN_SIGN","GREATER_THAN_SIGN","inlineFunction","templateName","state","max","posMax","text","src","position","pos","length","positionAfterContent","slice","indexOf","content","push","type","level","display","customInline","md","render","inline","ruler","rule","renderer","rules","tokens","idx","options"],"mappings":"AAAA,IAAMA,KAAK,GAAG,GAAd;AACA,IAAMC,cAAc,GAAG,GAAvB;AACA,IAAMC,iBAAiB,GAAG,GAA1B;AAEA;AACA;AACA;AACA;;IAEaC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD;AAAA,SAAkB,UAACC,KAAD,EAAW;AAAA,QAE3CC,GAF2C,GAInDD,KAJmD,CAEnDE,MAFmD;AAAA,QAG9CC,IAH8C,GAInDH,KAJmD,CAGnDI,GAHmD;AAKvD,QAAIC,QAAQ,GAAGL,KAAK,CAACM,GAArB;;AAEA,QAAIH,IAAI,CAACE,QAAD,CAAJ,KAAmBT;AAAe;AAAtC,MAA+C;AAC3C;AACA;AACA;AACA;AACA,eAAO,KAAP;AACH;;AAEDS,IAAAA,QAAQ,GAAGA,QAAQ,GAAGN,YAAY,CAACQ,MAAxB,GAAiC,CAA5C;;AAEA,QAAIJ,IAAI,CAACE,QAAD,CAAJ,KAAmBV;AAAM;AAA7B,MAAsC;AAClC,eAAO,KAAP;AACH;;AAEDU,IAAAA,QAAQ,IAAI,CAAZ;AAEA,QAAMG,oBAAoB,GAAGL,IAAI,CAACM,KAAL,CAAWJ,QAAX,EAAqBJ,GAArB,EAA0BS,OAA1B,CAAkCb,iBAAlC,CAA7B;;AACA,QAAIW,oBAAoB,KAAK,CAAC,CAA9B,EAAiC;AAC7B,aAAO,KAAP;AACH;;AAED,QAAMG,OAAO,GAAGR,IAAI,CAACM,KAAL,CAAWJ,QAAX,EAAqBA,QAAQ,GAAGG,oBAAhC,CAAhB;AACAH,IAAAA,QAAQ,IAAIG,oBAAoB,GAAG,CAAnC,CA7BuD;AA+BvD;AACA;AACA;AACA;;AACAR,IAAAA,KAAK,CAACM,GAAN,IAAa,CAAb,CAnCuD;;AAqCvDN,IAAAA,KAAK,CAACE,MAAN,GAAeG,QAAf,CArCuD;AAwCvD;AACA;;AACAL,IAAAA,KAAK,CAACY,IAAN,CAAW;AACPC,MAAAA,IAAI,YAAKd,YAAL,CADG;AAEPe,MAAAA,KAAK,EAAE,CAFA;AAGPH,MAAAA,OAAO,EAAPA,OAHO;AAIPI,MAAAA,OAAO,EAAE;AAJF,KAAX,EA1CuD;AAiDvD;AACA;AACA;AACA;;AACAf,IAAAA,KAAK,CAACM,GAAN,GAAYN,KAAK,CAACE,MAAlB,CArDuD;AAuDvD;;AACAF,IAAAA,KAAK,CAACE,MAAN,GAAeD,GAAf;AAEA,WAAO,IAAP;AACH,GA3D6B;AAAA;AA6D9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEae,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,QAAkC;AAAA,MAA3BlB,YAA2B,QAA3BA,YAA2B;AAAA,MAAbmB,MAAa,QAAbA,MAAa;AAC1DD,EAAAA,EAAE,CAACE,MAAH,CAAUC,KAAV,CAAgBR,IAAhB,CACIb,YADJ,EAEID,cAAc,CAACC,YAAD,CAFlB,EAGI;AAAEsB,IAAAA,IAAI,EAAE;AAAR,GAHJ,EAD0D;;AAO1DJ,EAAAA,EAAE,CAACK,QAAH,CAAYC,KAAZ,CAAkBxB,YAAlB,IAAkC,UAACyB,MAAD,EAASC,GAAT;AAAA,WAC9BP,MAAM,CAACM,MAAM,CAACC,GAAD,CAAN,CAAYd,OAAb,EAAsBa,MAAM,CAACC,GAAD,CAAN,CAAYC,OAAlC,CADwB;AAAA,GAAlC;AAEH;;;;"}