#!/usr/bin/env node

const program = require('commander')

const pkg = require('../package')

program
    .version(pkg.version)

    .usage('[command] [options]')

    .option('-q, --quiet', 'Show only errors')
    .option('-r, --root', 'Check only root packages')
    .option('-f, --force', 'Makes warnings equal errors')
    .option('-l, --check-list [string]', 'Check list. If no value, use all checks [require,license,depVersions,npmAudit]')
    .option('--registry [string]', 'NPM registry')
    .option('--userconfig [string]', 'path to npmrc')
    .option('--fix', 'update dependencies to last available versions in package.json')
    .option('--fix-force', 'update dependencies to last available versions in node_modules')
    .option('--lists-path [string]', 'lists require path')
    .option('--only-blacklist', 'if checks only blacklists')

    .on('--help', () => {
        console.log('')
        console.log('  Examples:')
        console.log()
        console.log('    $ whitelist --quiet')
        console.log('    $ whitelist -q --root --check-list license,require')
        console.log()
    })

    .parse(process.argv)

const checkList = program.checkList ? program.checkList.split(',') : ''

require('..')({
    quiet: program.quiet,
    root: program.root,
    checkList,
    pathToProject: process.cwd(),
    printToConsole: true,
    withDependencyPath: true,
    force: program.force,
    cli: true,
    registry: program.registry,
    userconfig: program.userconfig,
    fix: program.fix || program.fixForce,
    fixForce: program.fixForce,
    listsPath: program.listsPath,
    onlyBlacklist: program.onlyBlacklist
})
