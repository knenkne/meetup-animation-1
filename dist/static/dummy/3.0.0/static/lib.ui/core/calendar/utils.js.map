{"version":3,"file":"utils.js","sources":["../../src/calendar/utils.js"],"sourcesContent":["import {\n    format,\n    isValid,\n    toDate,\n    parse,\n    setHours,\n    setMinutes,\n    startOfMinute,\n    setYear,\n    setMonth,\n    getDay,\n    getYear,\n    getMonth,\n    addMonths,\n    startOfMonth,\n    endOfMonth,\n    startOfYear,\n    isWithinInterval,\n    eachDayOfInterval,\n    lastDayOfMonth\n} from 'date-fns'\nimport _ from 'lodash'\n\nimport { Input } from '../input'\n\nimport {\n    EMPTY_STRING,\n    MASK_DATE,\n    RANGE_DIVIDER,\n    VALUE_MODE,\n    FULL_ISO_FORMAT,\n    DATE_TIME_FORMAT,\n    COUNT_MONTHS,\n    MONTH_FORMAT,\n    regExpSpace,\n    underScoreWidthSpaceRegExp,\n    regExpNumbers,\n    MASK_QUARTER,\n    QUARTER_LENGTH,\n    LOCALE,\n    MAX_CELL_COUNT_PER_MONTH,\n    WEEK_LENGTH,\n    DEFAULT_DAY_OF_WEEK,\n    DELIMITER,\n    TABLE_SIZE,\n    DEFAULT_TIME_HOUR,\n    DEFAULT_TIME_MINUTE,\n    RU_DATE_REGEXP,\n    MULTIPLE_OF_TEN,\n    LAST_YEAR,\n    DEFAULT_DATE\n} from './constants'\n\nexport const dateStringValidation = (date, mask = MASK_DATE) => isValid(date) && !underScoreWidthSpaceRegExp.test(date) && (date.length >= mask.length || date instanceof Date)\n\nconst getStringOrEmpty = (date) => typeof date === 'string' ? date : EMPTY_STRING\n\nexport const formatDate = (date, dateFormat = 'L', mask = MASK_DATE) =>\n    dateStringValidation(date, mask)\n        ? format(toDate(date), dateFormat, LOCALE)\n        : getStringOrEmpty(date)\n\nexport const fullISOFormat = (date) => isValid(date) ? format(date, FULL_ISO_FORMAT, LOCALE) : date\n\nexport const makeISOdate = (date, hours, minutes) => fullISOFormat(setHours(setMinutes(startOfMinute(date), minutes), hours))\n\nexport const makeFullISOFromTime = (time, date) => {\n    const timeSplit = time.split(':')\n    if (time.length < DATE_TIME_FORMAT.length || underScoreWidthSpaceRegExp.test(time)) {\n        return time\n    }\n    return makeISOdate(\n        isValid(date) ? date : new Date(), timeSplit[0],\n        timeSplit[1])\n}\n\nexport const noNumbersNoString = (date) => regExpNumbers.test(date) ? formatDate(date) : EMPTY_STRING\n\nexport const getStringFromDateStartEnd = ({ start, end, rangeDivider = RANGE_DIVIDER }) =>\n    `${formatDate(start)\n    }${getStringOrEmpty(end).length > 0 || isValid(end) ? rangeDivider : EMPTY_STRING\n    }${formatDate(end)}`\n\nexport const transformDateValue = (value) => {\n    if (Input.Masked.utils.isMaskedValue(value)) {\n        return value.replace(RU_DATE_REGEXP, '$3.$2.$1')\n    } else if ((value.length > MASK_DATE.length) && isValid(value) && !underScoreWidthSpaceRegExp.test(value)) {\n        return format(toDate(value), 'L', LOCALE)\n    }\n\n    return value\n}\n\nexport const isofyingDateString = ({ value, mode = VALUE_MODE, mask = MASK_DATE, parseFormat = 'L' }) => {\n    let outValue = mode === VALUE_MODE ? value : EMPTY_STRING\n    const today = new Date()\n    if (value && value.length === mask.length && !underScoreWidthSpaceRegExp.test(value)) {\n        const parsedDate = setHours(setMinutes(parse(value, parseFormat, today, LOCALE), DEFAULT_DATE.MINUTES), DEFAULT_DATE.HOURS)\n\n        if (parsedDate.getFullYear() > LAST_YEAR) {\n            return '9999-12-31T11:50:00.000+02:30'\n        }\n\n        if (parsedDate.getFullYear() < 0) {\n            return '0000-01-01T11:50:00.000+02:30'\n        }\n\n        outValue = isValid(parsedDate) ? fullISOFormat(parsedDate) : outValue\n    }\n\n    return outValue || EMPTY_STRING\n}\n\nexport const mask = (value) => {\n    if (_.isObject(value)) {\n        return getStringFromDateStartEnd({\n            start: value.startDate,\n            end: value.endDate,\n        })\n    }\n    return `${value}`\n}\n\nconst validateDate = (date) => dateStringValidation(date) && fullISOFormat(date)\n\n/**\n *\n * @param {String} dateString - Строка даты\n * @return {Boolean} Признак соответствия строки формату DD.MM.YYYY\n */\nexport const isRuDate = (dateString) => {\n    // First check for the pattern\n    if (!/^(?:\\d{1,2}\\.){2}\\d{4}$/.test(dateString)) {\n        return false\n    }\n\n    // Parse the date parts to integers\n    const parts = dateString.split('.')\n    const day = parseInt(parts[0], 10)\n    const month = parseInt(parts[1], 10)\n    const year = parseInt(parts[2], 10)\n\n    // Check the ranges of month and year\n    if (year < 1000 || year > 3000 || month === 0 || month > 12) {\n        return false\n    }\n\n    const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    // Adjust for leap years\n    if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\n        monthLength[1] = 29\n    }\n\n    // Check the range of the day\n    return day > 0 && day <= monthLength[month - 1]\n}\n\nexport const parseRuDate = (date) => isRuDate(date) ? parse(date, 'DD.MM.YYYY', new Date()) : date\n\nexport const chooseValidDate = (firstDate, secondDate) =>\n    validateDate(firstDate) || validateDate(secondDate) || fullISOFormat(new Date())\n\nexport const isEndOfStringChanged = (date1, date2, dateFormat, maskArray) => {\n    const dateToSearch = formatDate(date1, dateFormat, maskArray)\n    const dateSearching = formatDate(date2, dateFormat, maskArray)\n    return dateSearching.length >= dateToSearch.length || _.startsWith(dateToSearch, dateSearching)\n}\n\nexport const makeFullISOStringFromMonthYear = (monthYear, date) => {\n    const monthYearParse = parse(monthYear, MONTH_FORMAT, date, LOCALE)\n    if (monthYear.length >= MONTH_FORMAT.length && isValid(monthYearParse) && !regExpSpace.test(monthYear)) {\n        return fullISOFormat(\n            setYear(\n                setMonth(\n                    date,\n                    getMonth(monthYearParse)\n                ),\n                getYear(monthYearParse)\n            )\n        )\n    }\n    return monthYear\n}\n\nexport const makeMonthsArray = (date, chunk) =>\n    _(new Array(COUNT_MONTHS))\n        .map((v, key) =>\n            fullISOFormat(\n                addMonths(startOfYear(date), key)\n            )\n        )\n        .chunk(chunk)\n        .value()\n\nexport const makeFixedRange = (date, monthLength) => `${fullISOFormat(startOfMonth(date))}/${fullISOFormat(endOfMonth(addMonths(date, monthLength)))}`\n\nexport const getQuarterNumber = (date) => {\n    const PART = 3\n    const validDate = toDate(date)\n    const arrayDate = makeMonthsArray(validDate, PART)\n\n    return _.find(_.map(arrayDate, (part, quarter) => {\n        if (isWithinInterval(validDate, {\n            start: _.first(part),\n            end: endOfMonth(_.last(part))\n        })) {\n            return quarter + 1\n        }\n        return void 0\n    }))\n}\n\nexport const quarterMask = (date) => {\n    if (Input.Masked.utils.isMaskedValue(date)) {\n        const year = date.substring(0, 4) // eslint-disable-line no-magic-numbers, comment: вырезается ISO-год\n        const month = date.substring(5, 7) // eslint-disable-line no-magic-numbers, comment: вырезается ISO-месяц\n        const quarter = _.floor((month - 1) / 3) + 1 // eslint-disable-line no-magic-numbers, comment: определяется номер квартала\n\n        return `${_.isNaN(quarter) ? Input.Masked.utils.MASK_SYMBOL : quarter}-й квартал ${year}`\n    } else if (dateStringValidation(date, MASK_QUARTER)) {\n        return `${getQuarterNumber(date)}-й квартал ${getYear(date)}`\n    }\n    return date\n}\n\nexport const quarterUnmask = (quarterString) => {\n    const stringParts = quarterString.replace(/-й квартал/g, '').split(' ')\n    if (_.last(stringParts) && quarterString.trim().length === MASK_QUARTER.length) {\n        const arrayDate = makeMonthsArray(setYear(new Date(), _.last(stringParts)), QUARTER_LENGTH)\n        return makeFixedRange(_.first(arrayDate[_.first(stringParts) - 1]), QUARTER_LENGTH)\n    }\n    return quarterString\n}\n\n// Формирование дней месяца\n\n/**\n * [getItemsDays] Возвращет массив недель, деленные на массив дней\n *\n * @param  {[Date]} date []\n * @return {[Array]}  return [[ , , , , ,d,d]],\n *                           [[d,d,d,d,d,d,d]],\n *                           [[d,d,d,d,d,d,d]],\n *                           [[d,d,d,d,d,d,d]],\n *                           [[d,d,d,d,d,d,d]],\n *                           [[d, , , , , , ]]\n */\nexport const getItemsDays = (date) => {\n    const parsedDate = isRuDate(date) ? parse(date, 'DD.MM.YYYY', new Date()) : date\n    const startMonth = startOfMonth(parsedDate, LOCALE)\n    const dayOfWeek = getDay(startMonth) ? getDay(startMonth) - LOCALE.locale.options.weekStartsOn : DEFAULT_DAY_OF_WEEK\n    const startDays = new Array(dayOfWeek).concat(eachDayOfInterval({\n        start: startMonth,\n        end: lastDayOfMonth(parsedDate)\n    }))\n    const emptyDaysCount = MAX_CELL_COUNT_PER_MONTH - startDays.length\n    const endEmptyDays = new Array(\n        // Добавляем пустые ячейки в конец списка так, чтобы не было пустой недели в конце\n        emptyDaysCount >= WEEK_LENGTH ? emptyDaysCount - WEEK_LENGTH : emptyDaysCount\n    )\n    return _.chunk(startDays.concat(endEmptyDays), WEEK_LENGTH)\n}\n\n// Конец блока \"Формирование дней месяца\"\n\n// Формирование годов\n\nconst setDefaultTime = (date) => setMinutes(setHours(date, DEFAULT_TIME_HOUR), DEFAULT_TIME_MINUTE)\nconst getStartOfYearWithTime = (date) => setDefaultTime(startOfYear(date))\n\nexport const getItemsYears = (date) => {\n    // Находим начало десятилетия и пушим его даты\n    let decade = Math.floor(getYear(date) / 10) * 10\n    return _(new Array(TABLE_SIZE))\n        .map((v, key) => {\n            const decadeDate = parse(\n                `01/01/${decade}`,\n                'MM/DD/YYYY',\n                new Date()\n            )\n            decade += 1\n            return decadeDate\n        })\n        .chunk(DELIMITER)\n        .value()\n}\n\n// Конец блока \"Формирование годов\"\n\n// Валидация даты\n\nexport const isDateValid = (date) => date && date.length >= MASK_DATE.length && isValid(date)\n\n/**\n *\n * @param {Array} years - массив, включающий даты, разбитые на 4 массива по 3 элемента\n * @return {String} Строка в формате \"2000-е\" с указанием десятилетия, с которого начинается ряд календаря\n */\nexport const getYearsTitle = (years) => {\n    const minYear = _.get(years, ['0', '0'], null)\n    const parsedYear = getYear(minYear)\n    return minYear ? `${parsedYear - (parsedYear % MULTIPLE_OF_TEN)}-е` : null\n}\n\nexport const utils = {\n    chooseValidDate,\n    dateStringValidation,\n    formatDate,\n    fullISOFormat,\n    makeISOdate,\n    makeFullISOFromTime,\n    makeFullISOStringFromMonthYear,\n    makeFixedRange,\n    getQuarterNumber,\n    quarterMask,\n    quarterUnmask\n}\n"],"names":["dateStringValidation","date","mask","MASK_DATE","isValid","underScoreWidthSpaceRegExp","test","length","Date","getStringOrEmpty","EMPTY_STRING","formatDate","dateFormat","format","toDate","LOCALE","fullISOFormat","FULL_ISO_FORMAT","makeISOdate","hours","minutes","setHours","setMinutes","startOfMinute","makeFullISOFromTime","time","timeSplit","split","DATE_TIME_FORMAT","noNumbersNoString","regExpNumbers","getStringFromDateStartEnd","start","end","rangeDivider","RANGE_DIVIDER","transformDateValue","value","Input","Masked","utils","isMaskedValue","replace","RU_DATE_REGEXP","isofyingDateString","mode","VALUE_MODE","parseFormat","outValue","today","parsedDate","parse","DEFAULT_DATE","MINUTES","HOURS","getFullYear","LAST_YEAR","_","isObject","startDate","endDate","validateDate","isRuDate","dateString","parts","day","parseInt","month","year","monthLength","parseRuDate","chooseValidDate","firstDate","secondDate","isEndOfStringChanged","date1","date2","maskArray","dateToSearch","dateSearching","startsWith","makeFullISOStringFromMonthYear","monthYear","monthYearParse","MONTH_FORMAT","regExpSpace","setYear","setMonth","getMonth","getYear","makeMonthsArray","chunk","Array","COUNT_MONTHS","map","v","key","addMonths","startOfYear","makeFixedRange","startOfMonth","endOfMonth","getQuarterNumber","PART","validDate","arrayDate","find","part","quarter","isWithinInterval","first","last","quarterMask","substring","floor","isNaN","MASK_SYMBOL","MASK_QUARTER","quarterUnmask","quarterString","stringParts","trim","QUARTER_LENGTH","getItemsDays","startMonth","dayOfWeek","getDay","locale","options","weekStartsOn","DEFAULT_DAY_OF_WEEK","startDays","concat","eachDayOfInterval","lastDayOfMonth","emptyDaysCount","MAX_CELL_COUNT_PER_MONTH","endEmptyDays","WEEK_LENGTH","getItemsYears","decade","Math","TABLE_SIZE","decadeDate","DELIMITER","isDateValid","getYearsTitle","years","minYear","get","parsedYear","MULTIPLE_OF_TEN"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqDaA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;AAAA,MAAOC,IAAP,uEAAcC,SAAd;AAAA,SAA4BC,OAAO,CAACH,IAAD,CAAP,IAAiB,CAACI,0BAA0B,CAACC,IAA3B,CAAgCL,IAAhC,CAAlB,KAA4DA,IAAI,CAACM,MAAL,IAAeL,IAAI,CAACK,MAApB,IAA8BN,IAAI,YAAYO,IAA1G,CAA5B;AAAA;;AAEpC,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACR,IAAD;AAAA,SAAU,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCS,YAA5C;AAAA,CAAzB;;IAEaC,UAAU,GAAG,SAAbA,UAAa,CAACV,IAAD;AAAA,MAAOW,UAAP,uEAAoB,GAApB;AAAA,MAAyBV,IAAzB,uEAAgCC,SAAhC;AAAA,SACtBH,oBAAoB,CAACC,IAAD,EAAOC,IAAP,CAApB,GACMW,MAAM,CAACC,MAAM,CAACb,IAAD,CAAP,EAAeW,UAAf,EAA2BG,MAA3B,CADZ,GAEMN,gBAAgB,CAACR,IAAD,CAHA;AAAA;IAKbe,aAAa,GAAG,SAAhBA,aAAgB,CAACf,IAAD;AAAA,SAAUG,OAAO,CAACH,IAAD,CAAP,GAAgBY,MAAM,CAACZ,IAAD,EAAOgB,eAAP,EAAwBF,MAAxB,CAAtB,GAAwDd,IAAlE;AAAA;IAEhBiB,WAAW,GAAG,SAAdA,WAAc,CAACjB,IAAD,EAAOkB,KAAP,EAAcC,OAAd;AAAA,SAA0BJ,aAAa,CAACK,QAAQ,CAACC,UAAU,CAACC,aAAa,CAACtB,IAAD,CAAd,EAAsBmB,OAAtB,CAAX,EAA2CD,KAA3C,CAAT,CAAvC;AAAA;IAEdK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAOxB,IAAP,EAAgB;AAC/C,MAAMyB,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAlB;;AACA,MAAIF,IAAI,CAAClB,MAAL,GAAcqB,gBAAgB,CAACrB,MAA/B,IAAyCF,0BAA0B,CAACC,IAA3B,CAAgCmB,IAAhC,CAA7C,EAAoF;AAChF,WAAOA,IAAP;AACH;;AACD,SAAOP,WAAW,CACdd,OAAO,CAACH,IAAD,CAAP,GAAgBA,IAAhB,GAAuB,IAAIO,IAAJ,EADT,EACqBkB,SAAS,CAAC,CAAD,CAD9B,EAEdA,SAAS,CAAC,CAAD,CAFK,CAAlB;AAGH;IAEYG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC5B,IAAD;AAAA,SAAU6B,aAAa,CAACxB,IAAd,CAAmBL,IAAnB,IAA2BU,UAAU,CAACV,IAAD,CAArC,GAA8CS,YAAxD;AAAA;IAEpBqB,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,GAAV,QAAUA,GAAV;AAAA,+BAAeC,YAAf;AAAA,MAAeA,YAAf,kCAA8BC,aAA9B;AAAA,mBAClCxB,UAAU,CAACqB,KAAD,CADwB,SAElCvB,gBAAgB,CAACwB,GAAD,CAAhB,CAAsB1B,MAAtB,GAA+B,CAA/B,IAAoCH,OAAO,CAAC6B,GAAD,CAA3C,GAAmDC,YAAnD,GAAkExB,YAFhC,SAGlCC,UAAU,CAACsB,GAAD,CAHwB;AAAA;IAK5BG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AACzC,MAAIC,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,aAAnB,CAAiCJ,KAAjC,CAAJ,EAA6C;AACzC,WAAOA,KAAK,CAACK,OAAN,CAAcC,cAAd,EAA8B,UAA9B,CAAP;AACH,GAFD,MAEO,IAAKN,KAAK,CAAC9B,MAAN,GAAeJ,SAAS,CAACI,MAA1B,IAAqCH,OAAO,CAACiC,KAAD,CAA5C,IAAuD,CAAChC,0BAA0B,CAACC,IAA3B,CAAgC+B,KAAhC,CAA5D,EAAoG;AACvG,WAAOxB,MAAM,CAACC,MAAM,CAACuB,KAAD,CAAP,EAAgB,GAAhB,EAAqBtB,MAArB,CAAb;AACH;;AAED,SAAOsB,KAAP;AACH;IAEYO,kBAAkB,GAAG,SAArBA,kBAAqB,QAAuE;AAAA,MAApEP,KAAoE,SAApEA,KAAoE;AAAA,yBAA7DQ,IAA6D;AAAA,MAA7DA,IAA6D,2BAAtDC,UAAsD;AAAA,yBAA1C5C,IAA0C;AAAA,MAA1CA,IAA0C,2BAAnCC,SAAmC;AAAA,gCAAxB4C,WAAwB;AAAA,MAAxBA,WAAwB,kCAAV,GAAU;AACrG,MAAIC,QAAQ,GAAGH,IAAI,KAAKC,UAAT,GAAsBT,KAAtB,GAA8B3B,YAA7C;AACA,MAAMuC,KAAK,GAAG,IAAIzC,IAAJ,EAAd;;AACA,MAAI6B,KAAK,IAAIA,KAAK,CAAC9B,MAAN,KAAiBL,IAAI,CAACK,MAA/B,IAAyC,CAACF,0BAA0B,CAACC,IAA3B,CAAgC+B,KAAhC,CAA9C,EAAsF;AAClF,QAAMa,UAAU,GAAG7B,QAAQ,CAACC,UAAU,CAAC6B,KAAK,CAACd,KAAD,EAAQU,WAAR,EAAqBE,KAArB,EAA4BlC,MAA5B,CAAN,EAA2CqC,YAAY,CAACC,OAAxD,CAAX,EAA6ED,YAAY,CAACE,KAA1F,CAA3B;;AAEA,QAAIJ,UAAU,CAACK,WAAX,KAA2BC,SAA/B,EAA0C;AACtC,aAAO,+BAAP;AACH;;AAED,QAAIN,UAAU,CAACK,WAAX,KAA2B,CAA/B,EAAkC;AAC9B,aAAO,+BAAP;AACH;;AAEDP,IAAAA,QAAQ,GAAG5C,OAAO,CAAC8C,UAAD,CAAP,GAAsBlC,aAAa,CAACkC,UAAD,CAAnC,GAAkDF,QAA7D;AACH;;AAED,SAAOA,QAAQ,IAAItC,YAAnB;AACH;IAEYR,IAAI,GAAG,SAAPA,IAAO,CAACmC,KAAD,EAAW;AAC3B,MAAIoB,CAAC,CAACC,QAAF,CAAWrB,KAAX,CAAJ,EAAuB;AACnB,WAAON,yBAAyB,CAAC;AAC7BC,MAAAA,KAAK,EAAEK,KAAK,CAACsB,SADgB;AAE7B1B,MAAAA,GAAG,EAAEI,KAAK,CAACuB;AAFkB,KAAD,CAAhC;AAIH;;AACD,mBAAUvB,KAAV;AACH;;AAED,IAAMwB,YAAY,GAAG,SAAfA,YAAe,CAAC5D,IAAD;AAAA,SAAUD,oBAAoB,CAACC,IAAD,CAApB,IAA8Be,aAAa,CAACf,IAAD,CAArD;AAAA,CAArB;AAEA;AACA;AACA;AACA;AACA;;;IACa6D,QAAQ,GAAG,SAAXA,QAAW,CAACC,UAAD,EAAgB;AACpC;AACA,MAAI,CAAC,0BAA0BzD,IAA1B,CAA+ByD,UAA/B,CAAL,EAAiD;AAC7C,WAAO,KAAP;AACH,GAJmC;;;AAOpC,MAAMC,KAAK,GAAGD,UAAU,CAACpC,KAAX,CAAiB,GAAjB,CAAd;AACA,MAAMsC,GAAG,GAAGC,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAApB;AACA,MAAMG,KAAK,GAAGD,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAtB;AACA,MAAMI,IAAI,GAAGF,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAArB,CAVoC;;AAapC,MAAII,IAAI,GAAG,IAAP,IAAeA,IAAI,GAAG,IAAtB,IAA8BD,KAAK,KAAK,CAAxC,IAA6CA,KAAK,GAAG,EAAzD,EAA6D;AACzD,WAAO,KAAP;AACH;;AAED,MAAME,WAAW,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAApB,CAjBoC;;AAoBpC,MAAID,IAAI,GAAG,GAAP,KAAe,CAAf,IAAqBA,IAAI,GAAG,GAAP,KAAe,CAAf,IAAoBA,IAAI,GAAG,CAAP,KAAa,CAA1D,EAA8D;AAC1DC,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,EAAjB;AACH,GAtBmC;;;AAyBpC,SAAOJ,GAAG,GAAG,CAAN,IAAWA,GAAG,IAAII,WAAW,CAACF,KAAK,GAAG,CAAT,CAApC;AACH;IAEYG,WAAW,GAAG,SAAdA,WAAc,CAACrE,IAAD;AAAA,SAAU6D,QAAQ,CAAC7D,IAAD,CAAR,GAAiBkD,KAAK,CAAClD,IAAD,EAAO,YAAP,EAAqB,IAAIO,IAAJ,EAArB,CAAtB,GAAyDP,IAAnE;AAAA;IAEdsE,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAYC,UAAZ;AAAA,SAC3BZ,YAAY,CAACW,SAAD,CAAZ,IAA2BX,YAAY,CAACY,UAAD,CAAvC,IAAuDzD,aAAa,CAAC,IAAIR,IAAJ,EAAD,CADzC;AAAA;IAGlBkE,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAQC,KAAR,EAAehE,UAAf,EAA2BiE,SAA3B,EAAyC;AACzE,MAAMC,YAAY,GAAGnE,UAAU,CAACgE,KAAD,EAAQ/D,UAAR,EAAoBiE,SAApB,CAA/B;AACA,MAAME,aAAa,GAAGpE,UAAU,CAACiE,KAAD,EAAQhE,UAAR,EAAoBiE,SAApB,CAAhC;AACA,SAAOE,aAAa,CAACxE,MAAd,IAAwBuE,YAAY,CAACvE,MAArC,IAA+CkD,CAAC,CAACuB,UAAF,CAAaF,YAAb,EAA2BC,aAA3B,CAAtD;AACH;IAEYE,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,SAAD,EAAYjF,IAAZ,EAAqB;AAC/D,MAAMkF,cAAc,GAAGhC,KAAK,CAAC+B,SAAD,EAAYE,YAAZ,EAA0BnF,IAA1B,EAAgCc,MAAhC,CAA5B;;AACA,MAAImE,SAAS,CAAC3E,MAAV,IAAoB6E,YAAY,CAAC7E,MAAjC,IAA2CH,OAAO,CAAC+E,cAAD,CAAlD,IAAsE,CAACE,WAAW,CAAC/E,IAAZ,CAAiB4E,SAAjB,CAA3E,EAAwG;AACpG,WAAOlE,aAAa,CAChBsE,OAAO,CACHC,QAAQ,CACJtF,IADI,EAEJuF,QAAQ,CAACL,cAAD,CAFJ,CADL,EAKHM,OAAO,CAACN,cAAD,CALJ,CADS,CAApB;AASH;;AACD,SAAOD,SAAP;AACH;IAEYQ,eAAe,GAAG,SAAlBA,eAAkB,CAACzF,IAAD,EAAO0F,KAAP;AAAA,SAC3BlC,CAAC,CAAC,IAAImC,KAAJ,CAAUC,YAAV,CAAD,CAAD,CACKC,GADL,CACS,UAACC,CAAD,EAAIC,GAAJ;AAAA,WACDhF,aAAa,CACTiF,SAAS,CAACC,WAAW,CAACjG,IAAD,CAAZ,EAAoB+F,GAApB,CADA,CADZ;AAAA,GADT,EAMKL,KANL,CAMWA,KANX,EAOKtD,KAPL,EAD2B;AAAA;IAUlB8D,cAAc,GAAG,SAAjBA,cAAiB,CAAClG,IAAD,EAAOoE,WAAP;AAAA,mBAA0BrD,aAAa,CAACoF,YAAY,CAACnG,IAAD,CAAb,CAAvC,cAA+De,aAAa,CAACqF,UAAU,CAACJ,SAAS,CAAChG,IAAD,EAAOoE,WAAP,CAAV,CAAX,CAA5E;AAAA;IAEjBiC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACrG,IAAD,EAAU;AACtC,MAAMsG,IAAI,GAAG,CAAb;AACA,MAAMC,SAAS,GAAG1F,MAAM,CAACb,IAAD,CAAxB;AACA,MAAMwG,SAAS,GAAGf,eAAe,CAACc,SAAD,EAAYD,IAAZ,CAAjC;AAEA,SAAO9C,CAAC,CAACiD,IAAF,CAAOjD,CAAC,CAACqC,GAAF,CAAMW,SAAN,EAAiB,UAACE,IAAD,EAAOC,OAAP,EAAmB;AAC9C,QAAIC,gBAAgB,CAACL,SAAD,EAAY;AAC5BxE,MAAAA,KAAK,EAAEyB,CAAC,CAACqD,KAAF,CAAQH,IAAR,CADqB;AAE5B1E,MAAAA,GAAG,EAAEoE,UAAU,CAAC5C,CAAC,CAACsD,IAAF,CAAOJ,IAAP,CAAD;AAFa,KAAZ,CAApB,EAGI;AACA,aAAOC,OAAO,GAAG,CAAjB;AACH;;AACD,WAAO,KAAK,CAAZ;AACH,GARa,CAAP,CAAP;AASH;IAEYI,WAAW,GAAG,SAAdA,WAAc,CAAC/G,IAAD,EAAU;AACjC,MAAIqC,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,aAAnB,CAAiCxC,IAAjC,CAAJ,EAA4C;AACxC,QAAMmE,IAAI,GAAGnE,IAAI,CAACgH,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAb,CADwC;;AAExC,QAAM9C,KAAK,GAAGlE,IAAI,CAACgH,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAd,CAFwC;;AAGxC,QAAML,OAAO,GAAGnD,CAAC,CAACyD,KAAF,CAAQ,CAAC/C,KAAK,GAAG,CAAT,IAAc,CAAtB,IAA2B,CAA3C,CAHwC;;AAKxC,qBAAUV,CAAC,CAAC0D,KAAF,CAAQP,OAAR,IAAmBtE,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB4E,WAAtC,GAAoDR,OAA9D,gEAAmFxC,IAAnF;AACH,GAND,MAMO,IAAIpE,oBAAoB,CAACC,IAAD,EAAOoH,YAAP,CAAxB,EAA8C;AACjD,qBAAUf,gBAAgB,CAACrG,IAAD,CAA1B,gEAA8CwF,OAAO,CAACxF,IAAD,CAArD;AACH;;AACD,SAAOA,IAAP;AACH;IAEYqH,aAAa,GAAG,SAAhBA,aAAgB,CAACC,aAAD,EAAmB;AAC5C,MAAMC,WAAW,GAAGD,aAAa,CAAC7E,OAAd,CAAsB,aAAtB,EAAqC,EAArC,EAAyCf,KAAzC,CAA+C,GAA/C,CAApB;;AACA,MAAI8B,CAAC,CAACsD,IAAF,CAAOS,WAAP,KAAuBD,aAAa,CAACE,IAAd,GAAqBlH,MAArB,KAAgC8G,YAAY,CAAC9G,MAAxE,EAAgF;AAC5E,QAAMkG,SAAS,GAAGf,eAAe,CAACJ,OAAO,CAAC,IAAI9E,IAAJ,EAAD,EAAaiD,CAAC,CAACsD,IAAF,CAAOS,WAAP,CAAb,CAAR,EAA2CE,cAA3C,CAAjC;AACA,WAAOvB,cAAc,CAAC1C,CAAC,CAACqD,KAAF,CAAQL,SAAS,CAAChD,CAAC,CAACqD,KAAF,CAAQU,WAAR,IAAuB,CAAxB,CAAjB,CAAD,EAA+CE,cAA/C,CAArB;AACH;;AACD,SAAOH,aAAP;AACH;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACaI,YAAY,GAAG,SAAfA,YAAe,CAAC1H,IAAD,EAAU;AAClC,MAAMiD,UAAU,GAAGY,QAAQ,CAAC7D,IAAD,CAAR,GAAiBkD,KAAK,CAAClD,IAAD,EAAO,YAAP,EAAqB,IAAIO,IAAJ,EAArB,CAAtB,GAAyDP,IAA5E;AACA,MAAM2H,UAAU,GAAGxB,YAAY,CAAClD,UAAD,EAAanC,MAAb,CAA/B;AACA,MAAM8G,SAAS,GAAGC,MAAM,CAACF,UAAD,CAAN,GAAqBE,MAAM,CAACF,UAAD,CAAN,GAAqB7G,MAAM,CAACgH,MAAP,CAAcC,OAAd,CAAsBC,YAAhE,GAA+EC,mBAAjG;AACA,MAAMC,SAAS,GAAG,IAAIvC,KAAJ,CAAUiC,SAAV,EAAqBO,MAArB,CAA4BC,iBAAiB,CAAC;AAC5DrG,IAAAA,KAAK,EAAE4F,UADqD;AAE5D3F,IAAAA,GAAG,EAAEqG,cAAc,CAACpF,UAAD;AAFyC,GAAD,CAA7C,CAAlB;AAIA,MAAMqF,cAAc,GAAGC,wBAAwB,GAAGL,SAAS,CAAC5H,MAA5D;AACA,MAAMkI,YAAY,GAAG,IAAI7C,KAAJ;AAEjB2C,EAAAA,cAAc,IAAIG,WAAlB,GAAgCH,cAAc,GAAGG,WAAjD,GAA+DH,cAF9C,CAArB;AAIA,SAAO9E,CAAC,CAACkC,KAAF,CAAQwC,SAAS,CAACC,MAAV,CAAiBK,YAAjB,CAAR,EAAwCC,WAAxC,CAAP;AACH;;IASYC,aAAa,GAAG,SAAhBA,aAAgB,CAAC1I,IAAD,EAAU;AACnC;AACA,MAAI2I,MAAM,GAAGC,IAAI,CAAC3B,KAAL,CAAWzB,OAAO,CAACxF,IAAD,CAAP,GAAgB,EAA3B,IAAiC,EAA9C;AACA,SAAOwD,CAAC,CAAC,IAAImC,KAAJ,CAAUkD,UAAV,CAAD,CAAD,CACFhD,GADE,CACE,UAACC,CAAD,EAAIC,GAAJ,EAAY;AACb,QAAM+C,UAAU,GAAG5F,KAAK,iBACXyF,MADW,GAEpB,YAFoB,EAGpB,IAAIpI,IAAJ,EAHoB,CAAxB;AAKAoI,IAAAA,MAAM,IAAI,CAAV;AACA,WAAOG,UAAP;AACH,GATE,EAUFpD,KAVE,CAUIqD,SAVJ,EAWF3G,KAXE,EAAP;AAYH;AAID;;IAEa4G,WAAW,GAAG,SAAdA,WAAc,CAAChJ,IAAD;AAAA,SAAUA,IAAI,IAAIA,IAAI,CAACM,MAAL,IAAeJ,SAAS,CAACI,MAAjC,IAA2CH,OAAO,CAACH,IAAD,CAA5D;AAAA;AAE3B;AACA;AACA;AACA;AACA;;IACaiJ,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AACpC,MAAMC,OAAO,GAAG3F,CAAC,CAAC4F,GAAF,CAAMF,KAAN,EAAa,CAAC,GAAD,EAAM,GAAN,CAAb,EAAyB,IAAzB,CAAhB;;AACA,MAAMG,UAAU,GAAG7D,OAAO,CAAC2D,OAAD,CAA1B;AACA,SAAOA,OAAO,aAAME,UAAU,GAAIA,UAAU,GAAGC,eAAjC,eAAwD,IAAtE;AACH;IAEY/G,KAAK,GAAG;AACjB+B,EAAAA,eAAe,EAAfA,eADiB;AAEjBvE,EAAAA,oBAAoB,EAApBA,oBAFiB;AAGjBW,EAAAA,UAAU,EAAVA,UAHiB;AAIjBK,EAAAA,aAAa,EAAbA,aAJiB;AAKjBE,EAAAA,WAAW,EAAXA,WALiB;AAMjBM,EAAAA,mBAAmB,EAAnBA,mBANiB;AAOjByD,EAAAA,8BAA8B,EAA9BA,8BAPiB;AAQjBkB,EAAAA,cAAc,EAAdA,cARiB;AASjBG,EAAAA,gBAAgB,EAAhBA,gBATiB;AAUjBU,EAAAA,WAAW,EAAXA,WAViB;AAWjBM,EAAAA,aAAa,EAAbA;AAXiB;;;;"}