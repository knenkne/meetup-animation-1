{"version":3,"file":"masked.js","sources":["../../../src/input/masked/masked.jsx"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore'\n\nimport WrappedInput from '../input'\nimport defaultTheme from '../input.css'\n\nimport { maskedFormat, isMaskedValue, MASK_SYMBOL } from './masked-format'\n\n/* eslint-disable valid-jsdoc, comment: некорректный парсинг jsdoc */\n/**\n * [Zeplin](https://app.zeplin.io/project/59312e1ebdf1da6fc8d37ffb/dashboard?q=input%20general)\n * Поле ввода по маске\n *\n * @param {Object} props - свойства компонента\n * @return {JSX} - компонент\n */\nexport class Masked extends React.PureComponent {\n    static propTypes = {\n        // eslint-disable react/no-unused-prop-types, comment: сквозной проброс пропов\n        disabled: PropTypes.bool,\n        theme: PropTypes.shape({\n            input: PropTypes.string,\n            error: PropTypes.string,\n            readonly: PropTypes.string,\n            disabled: PropTypes.string\n        }),\n        refWrapper: PropTypes.func,\n\n        value: PropTypes.string,\n        onChange: PropTypes.func,\n\n        /**\n         * Mask of Input. For details see: text-mask-core package\n         */\n        mask: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.func\n        ]).isRequired,\n        /**\n         * Pipe of Input. For details see: text-mask-core package\n         */\n        pipe: PropTypes.func,\n        /**\n         * Проп для постоянного отображения маски ввода, а не по мере заполнения\n         */\n        guide: PropTypes.bool,\n        /**\n         * Проп для сохранения позиции у символов, которые идут после удаляемых символов\n         */\n        keepCharPositions: PropTypes.bool,\n        /**\n         * Указатель заполняемых символов\n         */\n        placeholderChar: PropTypes.string,\n        /**\n         * Функция, которая должна обработать элемент ввода (значение, курсор) перед тем,\n         * как отправить значение в mask (подмена символов, корректировка курсора, дополнительный запрет символов)\n         */\n        onBeforeChange: PropTypes.func\n        // eslint-enable\n    }\n\n    static defaultProps = {\n        disabled: false,\n        refWrapper: _.noop,\n        theme: defaultTheme,\n\n        value: '',\n        onChange: _.noop,\n        pipe: void 0,\n\n        guide: false,\n        keepCharPositions: false,\n        placeholderChar: '_',\n        onBeforeChange: _.noop\n    }\n\n    componentDidMount () {\n        this.textMaskInputElement = createTextMaskInputElement({\n            inputElement: this.textBox,\n            mask: this.props.mask,\n            pipe: this.props.pipe,\n            guide: this.props.guide,\n            placeholderChar: this.props.placeholderChar,\n            keepCharPositions: this.props.keepCharPositions\n        })\n        this.textMaskInputElement.update(this.props.value)\n    }\n\n    componentDidUpdate () {\n        this.textMaskInputElement.update(this.props.value)\n    }\n\n    setTextBoxRef = (node) => {\n        this.textBox = node\n        this.props.refWrapper(node)\n    }\n\n    handleChange = (event) => {\n        this.props.onBeforeChange(event)\n        this.textMaskInputElement.update()\n        this.props.onChange(event)\n    }\n\n    render () {\n        const omittedProps = _(this.props)\n            .omit([\n                'mask',\n                'pipe',\n                'guide',\n                'placeholderChar',\n                'keepCharPositions',\n                'onBeforeChange'\n            ])\n            .extend({\n                onChange: this.handleChange,\n                refWrapper: this.setTextBoxRef\n            })\n            .value()\n\n        return <WrappedInput {...omittedProps} />\n    }\n}\n\nMasked.displayName = 'Input.Masked'\nMasked.utils = {\n    maskedFormat,\n    isMaskedValue,\n    MASK_SYMBOL\n}\n"],"names":["Masked","node","textBox","props","refWrapper","event","onBeforeChange","textMaskInputElement","update","onChange","createTextMaskInputElement","inputElement","mask","pipe","guide","placeholderChar","keepCharPositions","value","omittedProps","_","omit","extend","handleChange","setTextBoxRef","React","PureComponent","disabled","PropTypes","bool","theme","shape","input","string","error","readonly","func","oneOfType","array","isRequired","noop","defaultTheme","displayName","utils","maskedFormat","isMaskedValue","MASK_SYMBOL"],"mappings":"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"}