// @flow
import { Bootstrap } from '../../bootstrap'
import { getCommonConfig } from '../../configuration/config'
import { getInitOptions } from '../../configuration/init'

const versionRegExp = /^\d+(\.\d+(\.\d+)?)?/

export const loaderLegacyPlugin = ({
    navigation
}: {
    [key: string]: string
}) => (bootstrap: Bootstrap) => {
    bootstrap.hooks.beforeLoadingApp.tapPromise(
        'loaderLegacyPlugin',
        async (requestUrl, appData) => {
            if (
                appData.vendorVersion &&
                versionRegExp.test(appData.vendorVersion)
            ) {
                await bootstrap.unmount()

                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–ª–∏–∑–Ω—ã–µ –≤–µ–Ω–¥–æ—Ä—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                const {
                    settings,
                    options,
                    features,
                    messages
                } = getInitOptions(appData && appData.name)

                bootstrap.apps.setCurrentApp(appData.name, {
                    unmount: () => {
                        // FIXME: üí©üí©üí© –≥—Ä—è–∑–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ react —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        const mainTag = document.getElementById('main')
                        if (mainTag) {
                            mainTag.innerHTML = ''
                        }
                    },
                    appData
                })

                import(
                    /* webpackChunkName: "loader-legacy" */ './loader-legacy'
                ).then(({ default: loaderLegacy }) => {
                    loaderLegacy(appData, {
                        navigation,
                        config: getCommonConfig(),
                        initResponse: {
                            settings: settings || {},
                            options: options || {},
                            features: features || {},
                            messages: messages || {}
                        }
                    })
                })

                // –í–µ—à–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ body
                if (
                    document.body &&
                    !document.body.classList.contains('is-legacy')
                ) {
                    document.body.classList.add('is-legacy')
                }

                console.info('Load legacy project')
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É bootstrap)
                return new Promise(() => {})
            }

            // –ï—Å–ª–∏ –Ω–µ 2.4, —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ body
            if (
                document.body &&
                document.body.classList.contains('is-legacy')
            ) {
                document.body.classList.remove('is-legacy')
            }

            return Promise.resolve()
        }
    )
}
